{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d6a05cc11af803296063.hot-update.js","sources":["webpack:///./components/loginform.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, FormText, InputGroup, Col} from 'reactstrap';\r\nimport web3 from '../Ethereum/web3';\r\nimport certificate from '../Ethereum/Contracts/certificateInstance';\r\nimport hash from 'object-hash';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n// import 'bootstrap/dist/js/bootstrap.js';\r\n// import 'jquery/src/jquery';\r\n// import 'bootstrap';\r\n\r\n// import {FormControl} from 'react-bootstrap';\r\nvar\t x = \"\";\r\nclass CertificateForm extends Component{\r\n\r\n\t// static async getInitialProps(){\r\n\t// \tconst accounts = await web3.eth.getAccounts();\r\n\t// \treturn {accounts: accounts};\r\n\t// }\r\n\r\n\tasync componentDidMount(){\r\n\t\tconst accounts = await web3.eth.getAccounts();\r\n\t\tthis.setState({accounts: accounts});\r\n\t}\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tlogo: \"\",\r\n\t\t\tcname: \"\",\r\n\t\t\tfname: \"\",\r\n\t\t\tlname: \"\",\r\n\t\t\tdesc: \"\",\r\n\t\t\tdate: \"\",\r\n\t\t\tsign: \"\",\r\n\t\t\ttxHash: \"\"\r\n\t\t};\r\n\r\n\t\t\r\n\t}\r\n\r\n\r\n\tasync signAndSend(){\r\n\t\tvar hashedCert = hash(this.state);\r\n\t\tawait certificate.methods.upload(hashedCert).send({\r\n\t\t\tfrom: this.state.accounts[0]\r\n\t\t}).on('transactionHash', function(txHash){\r\n\t\t\tx = txHash;\r\n\t\t});\r\n\t}\r\n\r\n\tasync verify(txHash){\r\n\t\t// console.log(\"hi\");\r\n\t\tvar hashedCert = hash(this.state);\r\n\t\tconsole.log('waiting..');\r\n\t\tvar tx = await web3.eth.getTransaction(x);\r\n\t\tconsole.log('done');\r\n\t\tconsole.log(tx);\r\n\t\tvar functionSignature = web3.eth.abi.encodeFunctionSignature('upload(string)');\r\n\t\tvar input = web3.eth.abi.decodeParameter('string', tx.input);\r\n\t\tconsole.log(input);\r\n\t\t// console.log(tx);\r\n\t\tconsole.log(functionSignature);\r\n\t}\r\n\r\n\trender(){\r\n\r\n\r\n\r\n\t\treturn (\r\n\t\t\t      <div>\r\n\t\t\t      \t<input className=\"abc\" type=\"text\" placeholder=\"logo\" \r\n\t\t\t      \tvalue={this.state.logo} onChange={(event) => this.setState({logo: event.target.value})} /><br />\r\n\t\t\t      \t<input type=\"text\" placeholder=\"company name\" \r\n\t\t\t      \tvalue={this.state.cname} onChange = {(event) => this.setState({cname: event.target.value})}/><br />\r\n\t\t\t      \t<input type=\"text\" placeholder=\"first name\" \r\n\t\t\t      \tvalue={this.state.fname} onChange = {(event) => this.setState({fname: event.target.value})}/><br />\r\n\t\t\t      \t<input type=\"text\" placeholder=\"last name\" \r\n\t\t\t      \tvalue={this.state.lname} onChange = {(event) => this.setState({lname: event.target.value})}/><br />\r\n\t\t\t      \t<input type=\"text\" placeholder=\"description\" \r\n\t\t\t      \tvalue={this.state.desc} onChange = {(event) => this.setState({desc: event.target.value})}/><br />\r\n\t\t\t      \t<input type=\"date\" placeholder=\"date\" \r\n\t\t\t      \tvalue={this.state.date} onChange = {(event) => this.setState({date: event.target.value})}/><br />\r\n\t\t\t      \t<input type=\"text\" placeholder=\"sign\" \r\n\t\t\t      \tvalue={this.state.sign} onChange = {(event) => this.setState({sign: event.target.value})}/><br />\r\n\t\t\t      \t<Button onClick={() => this.signAndSend()}>Submit</Button> <br />\r\n\t\t\t      \t<Button onClick={() => this.verify(this.txHash)}>Verify</Button>\r\n\t\t\t      </div>\r\n\r\n\t\t\t      \r\n\r\n\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CertificateForm;\r\n\r\n\r\n\r\n\r\n// 0x60095ea77f093baf7d12372d68c027f272da667414ce11431aa2c73d63b1b0bb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;AAGA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAcA;AACA;;;;;;;;;;;;AAGA;;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;AACA;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAhFA;AACA;AAkFA;;;;A","sourceRoot":""}